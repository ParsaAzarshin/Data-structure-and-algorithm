/**
 * ============================================================
 * üß© Problem: Remove Duplicates from Sorted Array (In-Place)
 * ============================================================
 *
 * üî∏ Problem Statement:
 * Given a *sorted* array of integers, remove the duplicate elements
 * in-place so that each unique element appears only once.
 * Return the length of the unique portion of the array.
 *
 * Example:
 *  Input:  [1, 1, 2, 2, 3]
 *  Output: 3
 *  Explanation: The array becomes [1, 2, 3, _, _], only first 3 elements matter.
 *
 * ------------------------------------------------------------
 * üéØ Requirements
 * ------------------------------------------------------------
 * - Array is already sorted (duplicates are adjacent).
 * - Remove duplicates *in-place* without using extra arrays.
 * - Return the count of unique elements.
 * - Space Complexity must stay O(1).
 *
 * ------------------------------------------------------------
 * üß© Decomposition
 * ------------------------------------------------------------
 * 1Ô∏è‚É£ Use two pointers: i (slow) & j (fast).
 *     - 'i' points to the last unique element position.
 *     - 'j' scans through the array looking for new values.
 * 2Ô∏è‚É£ If nums[j] !== nums[i]:
 *     - Move 'i' forward (i++).
 *     - Write nums[j] to nums[i].
 * 3Ô∏è‚É£ At the end, the array‚Äôs first (i+1) elements are unique.
 * 4Ô∏è‚É£ Return i + 1.
 *
 * ------------------------------------------------------------
 * üßæ Complexity Analysis
 * ------------------------------------------------------------
 *  Naive:      Time ‚Üí O(n),  Space ‚Üí O(n)
 *  Optimized:  Time ‚Üí O(n),  Space ‚Üí O(1)
 *
 * ------------------------------------------------------------
 * üß† Concept Reference
 * ------------------------------------------------------------
 * This uses the *Two Pointers* "parallel" pattern:
 * One pointer builds the 'clean' section, the other scans ahead.
 * Each value is checked exactly once ‚Äî turning a potential O(n¬≤)
 * problem into O(n).
 *
 * ============================================================
 * üê¢ Naive Version (Using Set for clarity)
 * ============================================================
 */

function removeDuplicatesNaive(nums) {
    const unique = [...new Set(nums)];
    for (let i = 0; i < unique.length; i++) {
        nums[i] = unique[i];
    }
    return unique.length; // number of unique elements
}
// üß™ Test (Naive)
console.log(removeDuplicatesNaive([1, 1, 2, 2, 3]));

/**
 * ============================================================
 * ‚ö° Optimized Version (Two Pointers | In-Place)
 * ============================================================
 *
 * Algorithm Flow:
 *  i ‚Üí last index of unique section
 *  j ‚Üí scanning pointer
 *
 *  Steps:
 *   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Initialization ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
 *   ‚îÇ i = 0                           ‚îÇ
 *   ‚îÇ nums = [1,1,2,2,3]              ‚îÇ
 *   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
 *
 *   for each j from 1 to n-1:
 *       if nums[j] !== nums[i]:
 *           i++              ‚Üí move unique boundary forward
 *           nums[i] = nums[j] ‚Üí copy new unique value
 *
 *   return (i + 1)
 */

function removeDuplicates(nums) {
    if (nums.length === 0) return 0;

    let i = 0; // points to last unique element position

    for (let j = 1; j < nums.length; j++) {
        // when finding a new unique value
        if (nums[j] !== nums[i]) {
            i++;               // expand unique section
            nums[i] = nums[j]; // write new unique element into place
        }
    }

    return i + 1; // total count of unique elements
}
// üß™ Test (Optimized)
console.log(removeDuplicates([1, 1, 2, 2, 3]));

/**
 * ------------------------------------------------------------
 * üîç Line-by-Line Example
 * ------------------------------------------------------------
 * Input: [1, 1, 2, 2, 3]
 *
 * Step-by-step execution:
 *  i=0, j=1 ‚Üí nums[j]==nums[i] (1==1) ‚Üí skip
 *  i=0, j=2 ‚Üí nums[j]!=nums[i] (2!=1) ‚Üí i=1; nums[1]=2  ‚Üí [1,2,2,2,3]
 *  i=1, j=3 ‚Üí nums[j]==nums[i] (2==2) ‚Üí skip
 *  i=1, j=4 ‚Üí nums[j]!=nums[i] (3!=2) ‚Üí i=2; nums[2]=3  ‚Üí [1,2,3,2,3]
 *
 * Output:
 *    ‚Üí return i+1 = 3
 *    ‚Üí array‚Äôs unique part: [1, 2, 3]
 *
 * ------------------------------------------------------------
 * ‚úÖ Final Result:
 * ------------------------------------------------------------
 * removeDuplicates([1, 1, 2, 2, 3]) ‚Üí 3
 * nums after function ‚Üí [1, 2, 3, 2, 3]
 *
 * Only first 3 elements are relevant.
 *
 * ============================================================
 */
